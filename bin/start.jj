/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. start.jj */
/*@egen*/PARSER_BEGIN(analizadorPESP)
class analizadorPESP/*@bgen(jjtree)*/implements analizadorPESPTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTanalizadorPESPState jjtree = new JJTanalizadorPESPState();

/*@egen*/
	public static void main(String[] args) throws ParseException, TokenMgrError
	{
		try {			
          analizadorPESP ae = new analizadorPESP(System.in); // System.in
          SimpleNode n = ae.Start();
		  n.dump("");
		  System.out.println("Thank you.");
		} catch(TokenMgrError e){
	        System.out.println (" ERROR LEXICO EN TOKEN.");
	        System.out.println (e.getMessage());
	    } catch(ParseException e){
        	System.out.println(" === Error de parseo encontrado en codigo fuente PESP === \n "+e.getMessage());
	    } catch (Exception e) {
	      System.out.println("Oops.");
	      System.out.println(e.getMessage());
	      e.printStackTrace();
	    }
	
	}
}
PARSER_END(analizadorPESP)


/* DEFINICION DE ESTRUCTURAS */

TOKEN: {
    <PROGRAMA: "clase">{System.out.println("CLASE PRINCIPAL> "+image+"\n");}
    |<FUNCION: "func" >{ System.out.println("\nFUNCION -> "+image+"\n");}
    |<IF:      "si" > { System.out.println("\nDECISION \t-> "+image);}
    |<ELSE:    "sino" > { System.out.println("\nDECISION NEGADO -> "+image);}
    |<WHILE:   "mientras" > {System.out.println("\nCICLO -> "+image);}
    |<RETURN:  "retorna" > {System.out.println("\nDEVUELVE VALOR -> "+image);}
    |<CONST:   "const" > {System.out.println("\nCONSTANTE -> "+image);}
    |<VAR:     "var" > {System.out.println("\nVARIABLE -> "+image);}
}

/* DEFINICION DE AGRUPACIONES */

TOKEN: {
    <PARENIZQ: "(" >{ System.out.println("ABRE GRUPO -> " +image);}
    |<PARENDER: ")">{ System.out.println("CIERRA GRUPO -> " + image);}
    |<LLAVEIZQ: "{">{ System.out.println("\nABRE BLOQUE -> " + image+"\n");}
    |<LLAVEDER: "}">{ System.out.println("\nCIERRA BLOQUE -> " + image+"\n");}
    
}

/* DEFINICION DE ASIGNACION Y COMPARACIONES*/

TOKEN: {
  	<ASIGNACION: "=" >{ System.out.println("ASIGNACION -> "+image);}
    |<MENOR:     "<">{ System.out.println("MENOR QUE -> "+image);}
    |<MAYOR:     ">">{ System.out.println("MAYOR QUE -> "+image);}
    |<NEGACION:  "!=">{ System.out.println("NEGACION -> "+image);}
    |<IGUALDAD:  "==">{ System.out.println("IGUALDAD -> "+image);}
    |<COMA:      ",">{ System.out.println("COMA -> "+image);}
    |<SEMICOLON: ";">{ System.out.println("CIERRE DE SENTENCIA -> " + image+"\n");}
}

/* DEFINICION DE ARITMETICA */

TOKEN: {
	< SUMA : "+" > { System.out.println("SUMA - > "+image);}
	| < RESTA : "-" > { System.out.println("RESTA - > "+image); }
	| < MULTIPLICACION: "*" > { System.out.println("MULTIPLICACION - > "+image); }
	| < DIVISION: "/" > { System.out.println("DIVISION - > "+image ); }
}


/* DEFINICION DE MODIFICADORES */

TOKEN: {
   <READ: "leer" >{ System.out.println("LEER -> "+image);}
  |<PRINT: "imprime" >{ System.out.println("IMPRIMIR -> "+image);}

}

/* DEFINICION DE IDENTIFICADORES */

TOKEN: {
   <INT: "entero" >{ System.out.println("ENTERO -> "+image);}
  |<STRING: "cadena" >{ System.out.println("CADENA -> "+image);}
  |<BOOLEAN: "booleano" > { System.out.println("BOOLEANO - >"+image);}
  |<NUMBER: (["0" - "9"])+>{ System.out.println("NUMERO -> "+image);}
  |<TEXT: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n")))* "\""> {  System.out.println("CADENA DE TEXTO -> "+image);  }
  |<VALBOOL: "true" | "false" | "-1" > { System.out.println("VALOR BOOLEANO - >"+image);}
  |<IDENTIFICADOR: (["a"-"z", "A"-"Z", "0"-"9"])+ >{ System.out.println("IDENTIFICADOR -> "+image);}
}

/* CARACTERES A IGNORAR */

SKIP: { " " |"\t" |"\n" |"\r" | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")> {System.out.println("= COMENTARIO IGNORADO = ");} }


/** Main production. */
SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  <PROGRAMA><IDENTIFICADOR>
  <LLAVEIZQ> 
   (
     bloque()
   )* 
  <LLAVEDER><EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


//void boot () : {}
//{
//  /*(
//    <PROGRAMA>|<FUNCION>|<IF>|<ELSE>|<WHILE>|<RETURN>|<PARENIZQ>|<PARENDER>|<LLAVEIZQ>|<LLAVEDER>
//    | <ASIGNACION>|<MENOR>|<MAYOR>|<NEGACION>|<IGUALDAD>|<COMA>|<SEMICOLON>|<SUMA>| <RESTA>
//    | <MULTIPLICACION>|<DIVISION>| <INT>| <STRING>| <BOOLEAN>| <NUMBER>| <TEXT>| <VALBOOL>| <IDENTIFICADOR>
//    | <CONST> | <VAR> | <READ> | <PRINT>
//  )*
//  < EOF >*/
//
//  <PROGRAMA><IDENTIFICADOR>
//  <LLAVEIZQ> 
//   (
//     bloque()
//      
//   )* 
//  <LLAVEDER><EOF>
//}

void bloque(): {/*@bgen(jjtree) bloque */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) bloque */
        try {
/*@egen*/
	LOOKAHEAD(2) variablesGlobales() | funcion()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void variablesGlobales():
{/*@bgen(jjtree) variablesGlobales */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLESGLOBALES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variablesGlobales */
        try {
/*@egen*/
	(<INT>|<STRING>|<BOOLEAN>) <IDENTIFICADOR> (< ASIGNACION >(< NUMBER >| < TEXT > | < VALBOOL >))* (<COMA><IDENTIFICADOR>)* bloque()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void funcion(): {/*@bgen(jjtree) funcion */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) funcion */
  try {
/*@egen*/
  <FUNCION><IDENTIFICADOR><PARENIZQ>  parametros() <PARENDER > < LLAVEIZQ >sentencias()<LLAVEDER >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void parametros(): {/*@bgen(jjtree) parametros */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) parametros */
          try {
/*@egen*/
		  (	    (< INT >|<STRING >|<BOOLEAN >) (<IDENTIFICADOR>)* (<COMA> <IDENTIFICADOR >)
	  )*/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
//	  (<PRIVATE>|<PUBLIC>)(<INT>|<DEC>|<STR>|<CHR>) <IDENTIFIER>(<COMMA><IDENTIFIER>)*
	
}

void sentencias(): {/*@bgen(jjtree) sentencias */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) sentencias */
        try {
/*@egen*/
	(
	    LOOKAHEAD(3) declaraciones()
	  | imprimir()
	  | leer()
	  | estructuraDecision()
	  | estructuraRepetitiva()
      | retornaValor()
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void declaraciones():{/*@bgen(jjtree) declaraciones */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaraciones */
  try {
/*@egen*/
  (< INT >|<STRING >|<BOOLEAN >) <IDENTIFICADOR> <ASIGNACION> (<TEXT> | <NUMBER> | <VALBOOL>) DR()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
//  <INT> <IDENTIFICADOR> <ASIGNACION> <NUMBER>  DR() |
//  <STRING> <IDENTIFICADOR> <ASIGNACION> <TEXT>  DR() |
//  <BOOLEAN> <IDENTIFICADOR> <ASIGNACION> <VALBOOL>  DR()
}

void DR(): {/*@bgen(jjtree) DR */
  SimpleNode jjtn000 = new SimpleNode(JJTDR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) DR */
  try {
/*@egen*/
  LOOKAHEAD(3) declaraciones() | LOOKAHEAD(3) sentencias() | estructuraRepetitiva() | estructuraDecision()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void estructuraDecision(): {/*@bgen(jjtree) estructuraDecision */
  SimpleNode jjtn000 = new SimpleNode(JJTESTRUCTURADECISION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) estructuraDecision */
  try {
/*@egen*/
  < IF ><PARENIZQ > comparaciones() <PARENDER ><LLAVEIZQ> sentencias() <LLAVEDER >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void estructuraRepetitiva() : {/*@bgen(jjtree) estructuraRepetitiva */
  SimpleNode jjtn000 = new SimpleNode(JJTESTRUCTURAREPETITIVA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) estructuraRepetitiva */
        try {
/*@egen*/
	< WHILE ><PARENIZQ > comparaciones() < PARENDER ><LLAVEIZQ > sentencias() <LLAVEDER >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void retornaValor():{/*@bgen(jjtree) retornaValor */
  SimpleNode jjtn000 = new SimpleNode(JJTRETORNAVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) retornaValor */
  try {
/*@egen*/
  <RETURN><IDENTIFICADOR>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void comparaciones(): {/*@bgen(jjtree) comparaciones */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARACIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) comparaciones */
  try {
/*@egen*/
  valor() operadores() valor()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void valor(): {/*@bgen(jjtree) valor */
  SimpleNode jjtn000 = new SimpleNode(JJTVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) valor */
  try {
/*@egen*/
  < IDENTIFICADOR > | < NUMBER > | < TEXT > | < BOOLEAN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operadores(): {/*@bgen(jjtree) operadores */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) operadores */
  try {
/*@egen*/
  < MENOR > | < MAYOR > | < NEGACION > | < IGUALDAD >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void imprimir(): {/*@bgen(jjtree) imprimir */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) imprimir */
        try {
/*@egen*/
	<PRINT><IDENTIFICADOR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void leer():{/*@bgen(jjtree) leer */
  SimpleNode jjtn000 = new SimpleNode(JJTLEER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) leer */
        try {
/*@egen*/
	<READ ><IDENTIFICADOR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}